/*:
[–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)

## –£–ª—É—á—à–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ `Dictionary` –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ `Set`

–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ [SE-0165][SE-0165] –¥–æ–±–∞–≤–∏–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–∏–π –≤ `Dictionary` –∏ `Set`.

[SE-0165]: https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md "Swift Evolution Proposal SE-0165: Dictionary and Set Enhancements"

–ú–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ `groceries` –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
*/
import Foundation

struct GroceryItem: Hashable {
    var name: String
    var department: Department
    
    enum Department {
        case bakery, produce, seafood
    }
    
    static func ==(lhs: GroceryItem, rhs: GroceryItem) -> Bool {
        return (lhs.name, lhs.department) == (rhs.name, rhs.department)
    }
    
    var hashValue: Int {
        // Combine the hash values for the name and department
        return name.hashValue << 2 | department.hashValue
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:
let üçé = GroceryItem(name: "Apples", department: .produce)
let üçå = GroceryItem(name: "Bananas", department: .produce)
let ü•ê = GroceryItem(name: "Croissants", department: .bakery)
let üêü = GroceryItem(name: "Salmon", department: .seafood)
let üçá = GroceryItem(name: "Grapes", department: .produce)
let üçû = GroceryItem(name: "Bread", department: .bakery)
let üç§ = GroceryItem(name: "Shrimp", department: .seafood)

let groceries = [üçé, üçå, ü•ê, üêü, üçá, üçû, üç§]
/*:
 ### Sequence-based initializer

 –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π `values`, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∏–∑ —Å–∞–º–∏—Ö —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π `values`.
 */

let groceriesByDepartment = Dictionary(grouping: groceries,
                                       by: { item in item.department })
groceriesByDepartment[.bakery]! == [ü•ê, üçû]

/*:
 –∏–ª–∏ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
 */

let groceriesByFirstLetter = Dictionary(grouping: groceries,
                                       by: { $0.name.first! })
groceriesByFirstLetter["B"]! == [üçå,üçû]
/*:
–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ `mapValues` –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π `values` –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ–≤–∞—Ä—è.
 –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ –∂–µ —Å–∞–º—ã–µ –∫–ª—é—á–∏ `keys`, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π `values`, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ –∂–µ —Å–∞–º–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (internal layout), —á—Ç–æ –∏ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤—Ä—è –∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–µ hash values. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ `mapValues(_:)`¬†–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–º, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è "—Å –Ω—É–ª—è".
*/

let departmentCounts = groceriesByDepartment.mapValues {
                                     items in items.count}
 departmentCounts[.bakery] == 2

let departmentNames = groceriesByDepartment.mapValues {
                                 $0.map{$0.name.uppercased()}}
departmentNames

/*:
 –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è `Dictionary` –∏–∑ –ø–∞—Ä¬†`key- value`, , –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: –æ–¥–∏–Ω - –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π keys, –¥—Ä—É–≥–æ–π - –∫–æ–≥–¥–∞ –∫–ª—é—á–∏ keys –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.
 
 –ï—Å–ª–∏ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π `keys`¬†–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π `values`, –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –µ–¥–∏–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ `zip(_:, _":)`. ¬†–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–π —Å –∏–º–µ–Ω–∞–º–∏ name –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–∞–º–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:
 
 */

let zippedNames = zip(groceries.map { $0.name }, groceries)
/*:
–¢–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—Å—Ç —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π, –∞ —Å–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π:
 */

var groceriesByName = Dictionary(uniqueKeysWithValues: zippedNames)
 groceriesByName["Apples"] == üçé
 groceriesByName["Kumquats"] == nil
/*:
 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä `Dictionary(uniqueKeysAndValues:)` —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–Ω –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏¬†`keys`. –õ—é–±—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∫–ª—é—á–∏ `keys`¬†–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –æ—à–∏–±–∫–µ –Ω–∞ —ç—Ç–∞–ø–µ runtime.
  */


/*:
 ### Merging –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
 
 –ï—Å–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç (–∏–ª–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å) –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ –∫–ª—é—á–∏ keys, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π "—Å–ª–∏–≤–∞—é—â–∏–π" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä `Dictionary(_:,uniquingKeysWith:)`. –≠—Ç–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä `key-value` –Ω–∞—Ä—è–¥—É —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º , –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–ª—é—á `key` –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è. "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ" –∑–∞–º—ã–∫–∞–Ω–∏–µ –±–µ—Ä–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–≤–æ–µ –∏ –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∫–ª—é—á–∞ `key`, –∏ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ª—é–±—É—é –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
 
 –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π `(String, String)` –≤ —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ `Dictionary(_:,uniquingKeysWith:)`.¬†–ó–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ "dog" —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º¬†key –≤ –¥–≤—É—Ö –ø–∞—Ä–∞—Ö `key-value`.
 */

let pairs = [("dog", "üêï"), ("cat", "üê±"), ("dog", "üê∂"), ("bunny", "üê∞")]
let petmoji = Dictionary(pairs,
                         uniquingKeysWith: { (old, new) in new })
petmoji
 petmoji["cat"] == "üê±"
 petmoji["dog"] == "üê∂"
/*:
 –ï—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
 
 */

let duplicates = [("a", 1), ("b", 2), ("a", 3), ("b", 4)]
let letters = Dictionary(duplicates, uniquingKeysWith: { (first, _) in first })
letters

/*:
 ### –í—ã–±–æ—Ä –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é `filter(_:)`.
 
 –°–ª–æ–≤–∞—Ä–∏ Dictionaries —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –º–µ—Ç–æ–¥ `filter(_:)`, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ –º–∞—Å—Å–∏–≤ –ø–∞—Ä¬†`key-value`, –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ –≤ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö Swift. –ú–µ—Ç–æ–¥—É `filter(_:)`¬†–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä–µ—Ç `key-value` –ø–∞—Ä—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true`, –µ—Å–ª–∏ —ç—Ç–∞ `key-value`¬†–ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–π—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å `Dictionary`.
 */

func isFirstLetter(_ character: Character,
                        in name : String) -> Bool {
   return String(name.prefix(1)) == String (character)
}

let itemsByFirstLetter  =  groceriesByName.filter { (_, item)  in
    isFirstLetter("B",in:item.name)}
itemsByFirstLetter

let enoughtItems =  groceriesByDepartment.filter { (_, items)  in
    items.count > 2}
enoughtItems

/*:
  –í `filter(_:)` –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Å –∫–ª—é—á–∞–º–∏.
 –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –±—É–∫–≤—ã "S":
 */
let itemsByFirstLetterKey  =  groceriesByName.filter { (key, _)  in
    isFirstLetter("S",in:key)}
itemsByFirstLetterKey
/*:
   –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏:
 */

let names = ["Cagney", "Lacey", "Bensen", "Carol"]
let dict = Dictionary(uniqueKeysWithValues: zip(1..., names))
let filtered = dict.filter {
    $0.key % 2 == 0
}
type(of: filtered)
filtered


/*:
 ### Subscript —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 
 Subscripts –¥–ª—è —Å–ª–æ–≤–∞—Ä—è Dictionary –≤ Swift 3 –≤–æ–∑–≤—Ä–∞—â–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ value, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É key –∫–∞–∫ Optional, —Ç–∞–∫ —á—Ç–æ –æ–±—ã—á–Ω–æ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä ?? –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π¬†:

 */
var seasons = ["Spring" : 20, "Summer" : 30, "Autumn" : 10]
let winterTemperature = seasons["Winter"] ?? 0
/*:
 –í Swift 4 —É —Å–ª–æ–≤–∞—Ä–µ–π Dictionaries —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –Ω–æ–≤—ã–π¬†subscript ¬†–¥–ª—è –∫–ª—é—á–µ–π keys, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–ª—é—á–µ–π keys. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –Ω–æ–≤–æ–º—É subscript¬†—Ç–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ??¬†–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ù–ï Optional –∑–Ω–∞—á–µ–Ω–∏—è:
  */

let winterTemperature1 = seasons["Winter", default: 0]

/*:
 –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ value —á–µ—Ä–µ–∑ subscript:
 */
let source = "how now brown cow"
var frequencies: [Character: Int] = [:]
for c in source {
    frequencies[c, default: 0] += 1
}
frequencies

/*:
 –ú–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è merge - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π "–æ–ø—Ç–æ–º", –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ü–µ–ª–∏–∫–æ–º –≤ –¥—Ä—É–≥–æ–π:
 
 */
var cart = [üçå: 3, üçû: 1]
let otherCart = [üçå: 2, üçá: 3]
cart.merge(otherCart, uniquingKeysWith: +)
 cart == [üçå: 5, üçá: 3, üçû: 1]
/*:
 –ï—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å–ª–∏—è–Ω–∏—è –ù–ï –ü–û –ú–ï–°–¢–£ - –º–µ—Ç–æ–¥ merging:
 */

let dictionary = ["a": 1, "b": 2, "c": 3]
let otherDictionary = ["a": 3, "b": 4]

let keepingCurrent = dictionary.merging(otherDictionary)
{ (current, _) in current }

let replacingCurrent = dictionary.merging(otherDictionary)
{ (_, new) in new }

/*:
 –§–∏–ª—å—Ç—Ä `filter` –¥–ª—è `Set`  —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–ø–µ—Ä—å `Set`, –∞ –Ω–µ `Array`.
 */

let set: Set = [1,2,3,4,5]
let filteredSet = set.filter { $0 % 2 == 0 }
type(of: filteredSet)
filteredSet
let numberSet = Set(1 ... 100)
let twentyFivesOnly = numberSet.filter { $0 % 25 == 0 }
twentyFivesOnly
/*:
[–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)
 */

